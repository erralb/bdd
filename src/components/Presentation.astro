---
import { Image } from "astro:assets";
import slidesIcon from "../assets/slides.svg";
---

<a
  id="presentation-button"
  class="presentation-hidden presentation-trigger"
  type="button"
  title="Mode présentation"
>
  <Image src={slidesIcon} alt="Icône Présentation" />
</a>

<div class="presentation-progress"></div>

<div class="presentation-close">✕</div>

<div class="presentation-controls">
  <button id="presentation-prev" class="presentation-trigger" title="Slide précédente"> ← </button>
  <button id="presentation-next" class="presentation-trigger" title="Slide suivante"> → </button>
</div>

<div class="presentation-infos">
  <span id="presentation-slide-number">1</span> / <span id="presentation-slide-total">1</span>
</div>

<script>
  //   import { createSyncReader, createSyncWriter } from "../sync";

  const button = document.getElementById(
    "presentation-button"
  ) as HTMLButtonElement;

  let slides = Array.from(document.querySelectorAll(".presentation-slide"));

  let total = slides.length;
  document.getElementById("presentation-slide-total")!.textContent = total.toString();

  let slide = 0;
  document.getElementById("presentation-slide-number")!.textContent = (slide + 1).toString();
  let presenter = false;

  const presentationId = window.location.href;
  //   const syncWriter = createSyncWriter<number>(presentationId);

  const nextSlide = () => {
    if (slide === slides.length - 1) {
      return slide;
    }
    
    return slide + 1;
  };

  const prevSlide = () => {
    if (slide === 0) {
      return slide;
    }

    return slide - 1;
  };

  const nextClass = "presentation-next";
  const currClass = "presentation-current";
  const prevClass = "presentation-prev";

  const transitionClasses = [nextClass, currClass, prevClass];

  const keyHandlers: Record<string, () => number> = {
    ArrowRight: nextSlide,
    ArrowLeft: prevSlide,
  };

  const displaySlides = () => {
    for (let i = 0; i < slides.length; i++) {
      slides[i].classList.remove("active", "inactive", ...transitionClasses);

      if (i === slide) {
        slides[i].classList.add("active", currClass);
      } else {
        slides[i].classList.add("inactive");

        if (i > slide) {
          slides[i].classList.add(nextClass);
        } else {
          slides[i].classList.add(prevClass);
        }
      }
    }
  };

  let presenting = false;
  const startPresentation = () => {
    // button.innerHTML = "Slides";
    document.body.classList.add("presentation-overflow-hidden");
    document.querySelector(".sidebar-pane")?.classList.add("presentation-hide");

    presenting = true;
    displaySlides();
    setProgress();
    initListeners();
  };

  const endPresentation = () => {
    document.body.classList.remove("presentation-overflow-hidden");
    document
      .querySelector(".sidebar-pane")
      ?.classList.remove("presentation-hide");

    presenting = false;
    slides.map((s) =>
      s.classList.remove("active", "inactive", ...transitionClasses)
    );
  };

  const setPresenter = () => {
    presenter = true;
    // syncWriter(slide);
  };

  const setProgress = () => {
    const progress = ((slide + 1) / slides.length) * 100;
    document.body.style.setProperty("--presentation-progress", `${progress}%`);
  };

  const transition = (nextSlide: number) => {
    if (!presenting) {
      return;
    }

    if (slide === nextSlide) {
      return;
    }

    slides.forEach((s) => s.classList.remove(...transitionClasses));

    if (presenter) {
      //   syncWriter(nextSlide);
    }

    slide = nextSlide;
    document.getElementById("presentation-slide-number")!.textContent = (slide + 1).toString();

    displaySlides();
    setProgress();
  };

  let listenersInitialized = false;
  const initListeners = () => {
    if (listenersInitialized) {
      return;
    }

    document.querySelector(".presentation-close")!.addEventListener("click", endPresentation);
    document.getElementById("presentation-prev")!.addEventListener("click", () => {
      transition(prevSlide());
    });
    document.getElementById("presentation-next")!.addEventListener("click", () => {
      transition(nextSlide());
    });
    

    listenersInitialized = true;
    window.addEventListener("keyup", (ev) => {
      ev.preventDefault();
      const isEscape = ev.key === "Escape";
      if (isEscape) {
        endPresentation();
        return;
      }

      const isSpace = ev.key === " ";
      if (isSpace) {
        setPresenter();
        return;
      }

      const getSlide = keyHandlers[ev.key];

      if (!getSlide) {
        return;
      }

      const nextSlide = getSlide();
      transition(nextSlide);
    });

    // let touchstartX = 0;
    // let touchendX = 0;
    // const handleGesure = () => {
    //   const magnitude = Math.abs(touchstartX - touchendX);

    //   if (magnitude < 40) {
    //     // Ignore since this could be a scroll up/down
    //     return;
    //   }

    //   if (touchendX < touchstartX) {
    //     transition(nextSlide());
    //   }
    //   if (touchendX > touchstartX) {
    //     transition(prevSlide());
    //   }
    // };

    // document.addEventListener(
    //   "touchstart",
    //   (ev) => {
    //     touchstartX = ev.changedTouches[0].screenX;
    //   },
    //   false
    // );

    // document.addEventListener(
    //   "touchend",
    //   (event) => {
    //     touchendX = event.changedTouches[0].screenX;
    //     handleGesure();
    //   },
    //   false
    // );
  };

  // If there is no presentation on the page then we don't initialize
  if (slides.length) {
    button.classList.remove("presentation-hidden");
    button.addEventListener("click", startPresentation);
    // createSyncReader<number>(presentationId, slide, transition);
    // startPresentation(); //automatically start the presentation
  }
</script>

<style is:global>
  .presentation-progress,
  .presentation-controls,
  .presentation-infos,
  .presentation-close {
    display: none;
  }

  .presentation-hide {
    display: none;
  }

  .presentation-slide-title {
    display: none;
  }

  .presentation-overflow-hidden {
    overflow: hidden;
    visibility: hidden;

    .presentation-hidden {
      display: none;
    }

    h1,
    h2,
    h3,
    h4 {
      font-size: xx-large;
    }

    .presentation-slide.large {
      font-size: x-large;
    }

    .presentation-close {
      display: block;
      visibility: visible;
      position: absolute;
      z-index: 20;
      top: 20px;
      right: 20px;
      width: 30px;
      height: 30px;
      background: var(--color-brand-muted);
      cursor: pointer;
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    }

    .presentation-controls,
    .presentation-infos {
      visibility: visible;
      position: absolute;
      z-index: 20;
      top: 95vh;
      left: 20px;
      display: flex;
    }

    .presentation-infos {
      left: auto;
      right: 20px;
    }

    .presentation-progress {
      transition: width 1000ms;
      display: block;
      visibility: visible;
      position: absolute;
      z-index: 20;
      top: 0px;
      left: 0px;
      width: var(--presentation-progress);
      height: 0.25rem;
      background: var(--color-brand-muted);
    }

    .presentation-slide {
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;

      visibility: visible;

      transition: transform 300ms ease-in-out;

      display: flex;
      flex-direction: column;
      align-items: flex-start;
      justify-content: flex-start;

      background-color: var(--color-base);
      color: var(--color-on-base);

      box-sizing: border-box;
      height: 100vh;
      width: 100%;
      padding: 2rem 4rem;

      z-index: 10;
      overflow: auto;

      &.centered {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        /* align-items: flex-start; */
        justify-content: flex-start;
      }

      &.highlight {
        background-color: var(--color-brand);
        color: var(--color-on-brand);
      }

      .presentation-slide-title {
        display: block;
      }

      .presentation-slide-only {
        display: block;
      }

      .astro-code {
        filter: none;
      }

      h1,
      h2,
      h3,
      h4 {
        font-size: 3rem;
        border-top: none;
      }

      p,
      ul,
      li {
        display: block;
        width: 100%;
        max-width: 1200px;
        font-size: 2rem;
      }

      code {
        font-size: 2rem;
      }
    }

    .presentation-presenter #presentation-content {
      border: solid 8px var(--color-brand);
    }
  }

  .presentation-slide-only {
    display: none;
  }

  .presentation-next {
    transform: translateX(100%);
  }

  .presentation-current {
    transform: translateX(0%);
  }

  .presentation-prev {
    transform: translateX(-100%);
  }

  .presentation-trigger {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    max-height: 30px;
  }

  .presentation-trigger img {
    max-width: 30px;
    max-height: 30px;
  }
</style>
